my_query <- search_query
# Submit the Query
epm <- epm_query(my_query)
library(readr)
search_query <- read_file("search_terms.txt")
search_query <- gsub("[\r\n]", " ", search_query)  # Remove line breaks if needed
# Check the query
cat(substr(search_query, 1, 200))  # Print first 200 characters
# Use the correct variable in your query function
epm <- epm_query(search_query)
search_term
my_query
# Load required packages
library(httr)
library(jsonlite)
library(dplyr)
# PARAMETERS
search_terms_file <- "search_terms.txt"  # One term per line
char_limit <- 3500                       # Stay well below PubMed's 4000 char limit
output_file <- "pubmed_results.csv"
# 1. Read search terms
terms <- readLines(search_terms_file)
terms <- trimws(terms)
terms <- terms[terms != ""]  # Remove empty lines
# 2. Split into sub-queries
sub_queries <- list()
current_query <- ""
for (term in terms) {
# Add OR if not the first term
next_piece <- if (current_query == "") term else paste(current_query, "OR", term)
if (nchar(next_piece) > char_limit) {
sub_queries <- append(sub_queries, list(current_query))
current_query <- term
} else {
current_query <- next_piece
}
}
if (current_query != "") sub_queries <- append(sub_queries, list(current_query))
# 3. Query PubMed for each sub-query
get_pubmed_pmids <- function(query) {
base_url <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"
res <- GET(base_url, query = list(
db = "pubmed",
term = query,
retmax = 100000,
retmode = "json"
))
stop_for_status(res)
content(res, as = "parsed", type = "application/json")$esearchresult$idlist
}
all_pmids <- c()
for (q in sub_queries) {
cat("Running sub-query of length", nchar(q), "...\n")
pmids <- get_pubmed_pmids(q)
all_pmids <- c(all_pmids, pmids)
}
# 2. Split into sub-queries (robust version)
sub_queries <- list()
# 1. Read search terms
terms <- readLines(search_terms_file)
terms <- trimws(terms)
terms <- terms[terms != ""]  # Remove empty lines
# 2. Split into sub-queries (robust version)
sub_queries <- list()
current_query <- ""
for (i in seq_along(terms)) {
term <- terms[i]
# Add OR if not the first term in the query
next_piece <- if (current_query == "") term else paste(current_query, "OR", term)
if (nchar(next_piece) > char_limit) {
# Save the current query and start a new one with the current term
if (current_query != "") sub_queries <- append(sub_queries, list(current_query))
current_query <- term
} else {
current_query <- next_piece
}
}
# Add the last query if not empty
if (current_query != "") sub_queries <- append(sub_queries, list(current_query))
# 3. Query PubMed for each sub-query
get_pubmed_pmids <- function(query) {
base_url <- "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"
res <- GET(base_url, query = list(
db = "pubmed",
term = query,
retmax = 100000,
retmode = "json"
))
stop_for_status(res)
content(res, as = "parsed", type = "application/json")$esearchresult$idlist
}
all_pmids <- c()
for (q in sub_queries) {
cat("Running sub-query of length", nchar(q), "...\n")
pmids <- get_pubmed_pmids(q)
all_pmids <- c(all_pmids, pmids)
}
# Read and clean the search terms
search_query <- read_file("search_terms.txt")
search_query <- gsub("[\r\n]", " ", search_query)
# Split the query into manageable chunks (e.g., by words, or by a fixed number of characters)
# Here, we'll split by words and group every 100 words as an example
words <- unlist(strsplit(search_query, " "))
chunk_size <- 100
chunks <- split(words, ceiling(seq_along(words) / chunk_size))
# Function to process each chunk
process_chunk <- function(chunk) {
my_query <- paste(chunk, collapse = " ")
epm <- epm_query(my_query)
epm <- epm_fetch(epm, format = 'xml')
epm <- epm_parse(epm)
return(epm)
}
# Apply the function to all chunks and combine results
results_list <- lapply(chunks, process_chunk)
# Example Boolean query
search_query <- "(term1 AND term2) OR (term3 AND (term4 OR term5)) OR term6"
# Function to split at top-level ORs
split_boolean_query <- function(query) {
parts <- c()
depth <- 0
last_split <- 1
for (i in seq_along(strsplit(query, "")[[1]])) {
char <- substr(query, i, i)
if (char == "(") depth <- depth + 1
if (char == ")") depth <- depth - 1
# Look for ' OR ' at top level
if (depth == 0 && substr(query, i, i+3) == " OR ") {
parts <- c(parts, substr(query, last_split, i-1))
last_split <- i + 4
}
}
# Add the last part
parts <- c(parts, substr(query, last_split, nchar(query)))
return(parts)
}
# Split the query
chunks <- split_boolean_query(search_query)
# Now process each chunk as before
results_list <- lapply(chunks, function(chunk) {
epm <- epm_query(chunk)
epm <- epm_fetch(epm, format = 'xml')
epm <- epm_parse(epm)
return(epm)
})
# Example Boolean query
search_query <- "(term1 AND term2) OR (term3 AND (term4 OR term5)) OR term6"
# Function to split at top-level ORs
split_boolean_query <- function(query) {
parts <- c()
depth <- 0
last_split <- 1
for (i in seq_along(strsplit(query, "")[[1]])) {
char <- substr(query, i, i)
if (char == "(") depth <- depth + 1
if (char == ")") depth <- depth - 1
# Look for ' OR ' at top level
if (depth == 0 && substr(query, i, i+3) == " OR ") {
parts <- c(parts, substr(query, last_split, i-1))
last_split <- i + 4
}
}
# Add the last part
parts <- c(parts, substr(query, last_split, nchar(query)))
return(parts)
}
# Split the query
chunks <- split_boolean_query(search_query)
chunks
split_boolean_query <- function(query) {
chars <- strsplit(query, "")[[1]]
parts <- c()
depth <- 0
last_split <- 1
i <- 1
while (i <= length(chars)) {
# Track parentheses depth
if (chars[i] == "(") depth <- depth + 1
if (chars[i] == ")") depth <- depth - 1
# Look for ' OR ' or ' AND ' at depth 0 and NOT not immediately before the split
if (depth == 0) {
# Check for " OR "
if (i <= length(chars) - 3 && paste(chars[i:(i+2)], collapse="") == "OR ") {
before <- paste(chars[(i-4):(i-1)], collapse="")
# Ensure we don't split right after NOT
if (!grepl("NOT $", before)) {
parts <- c(parts, paste(chars[last_split:(i-2)], collapse=""))
last_split <- i + 3
}
}
# Check for " AND "
if (i <= length(chars) - 4 && paste(chars[i:(i+3)], collapse="") == "AND ") {
before <- paste(chars[(i-5):(i-1)], collapse="")
if (!grepl("NOT $", before)) {
parts <- c(parts, paste(chars[last_split:(i-2)], collapse=""))
last_split <- i + 4
}
}
}
i <- i + 1
}
# Add the last part
parts <- c(parts, paste(chars[last_split:length(chars)], collapse=""))
return(trimws(parts))
}
# Example Boolean query
search_query <- "(term1 AND NOT term2) OR (term3 AND (term4 OR NOT term5)) OR NOT term6"
# Split intelligently
chunks <- split_boolean_query(search_query)
print(chunks)
# Example Boolean query
search_query <- "(PFAS AND NOT PFOS) OR (PFAS AND (PFHxS OR NOT PFNA)) OR NOT PFHpA"
# Split intelligently
chunks <- split_boolean_query(search_query)
print(chunks)
# Now process each chunk as before
results_list <- lapply(chunks, function(chunk) {
epm <- epm_query(chunk)
epm <- epm_fetch(epm, format = 'xml')
epm <- epm_parse(epm)
return(epm)
})
# Example Boolean query
search_query <- "(Cannabis AND NOT Weed) OR (Weed AND (Cannabis OR NOT Mushrooms)) OR NOT Ganja"
# Split intelligently
chunks <- split_boolean_query(search_query)
print(chunks)
# Now process each chunk as before
results_list <- lapply(chunks, function(chunk) {
epm <- epm_query(chunk)
epm <- epm_fetch(epm, format = 'xml')
epm <- epm_parse(epm)
return(epm)
})
library(readr)
search_query <- read_file("search_terms.txt")
library(readr)
search_query <- read_file("search_terms.txt")
# Split intelligently
chunks <- split_boolean_query(search_query)
print(chunks)
# Now process each chunk as before
results_list <- lapply(chunks, function(chunk) {
epm <- epm_query(chunk)
epm <- epm_fetch(epm, format = 'xml')
epm <- epm_parse(epm)
return(epm)
})
search_query <- read_file("search_terms_mod.txt")
# Split intelligently
chunks <- split_boolean_query(search_query)
print(chunks)
search_query <- read_file("search_terms_mod.txt")
search_query <- gsub("[\r\n]", " ", search_query)
search_query <- read_file("search_terms_mod.txt")
search_query <- gsub("[\r\n]", " ", search_query)
# Split intelligently
chunks <- split_boolean_query(search_query)
print(chunks)
# Now process each chunk as before
results_list <- lapply(chunks, function(chunk) {
epm <- epm_query(chunk)
epm <- epm_fetch(epm, format = 'xml')
epm <- epm_parse(epm)
return(epm)
})
chunks
split_boolean_query <- function(query) {
chars <- strsplit(query, "")[[1]]
parts <- c()
depth <- 0
last_split <- 1
i <- 1
while (i <= length(chars)) {
# Track parentheses
if (chars[i] == "(") depth <- depth + 1
if (chars[i] == ")") depth <- depth - 1
# Only split at top-level ORs not inside NOT
if (depth == 0 && i <= length(chars) - 2) {
# Look for ' OR '
if (paste(chars[i:(i+1)], collapse="") == "OR") {
# Check if previous non-space token is NOT
j <- i - 1
while (j > 0 && chars[j] == " ") j <- j - 1
is_not <- FALSE
if (j >= 3 && paste(chars[(j-2):j], collapse="") == "NOT") is_not <- TRUE
if (!is_not) {
parts <- c(parts, paste(chars[last_split:(i-1)], collapse=""))
last_split <- i + 2
}
}
}
i <- i + 1
}
# Add the last part
parts <- c(parts, paste(chars[last_split:length(chars)], collapse=""))
return(trimws(parts))
}
# Split intelligently
chunks <- split_boolean_query(search_query)
print(chunks)
# Example Boolean query
split_boolean_query("(A AND B) OR (C AND D) NOT E")
split_boolean_query <- function(query) {
# Extract universal NOT at the end, e.g., "NOT D"
not_match <- regexpr(" NOT [^()]+$", query)
universal_not <- ""
if (not_match[1] != -1) {
universal_not <- substr(query, not_match[1], nchar(query))
query <- substr(query, 1, not_match[1] - 1)
query <- trimws(query)
}
chars <- strsplit(query, "")[[1]]
parts <- c()
depth <- 0
last_split <- 1
i <- 1
while (i <= length(chars)) {
# Track parentheses
if (chars[i] == "(") depth <- depth + 1
if (chars[i] == ")") depth <- depth - 1
# Only split at top-level ORs
if (depth == 0 && i <= length(chars) - 3) {
# Look for ' OR '
if (paste(chars[i:(i+2)], collapse="") == " OR") {
parts <- c(parts, trimws(paste(chars[last_split:(i-1)], collapse="")))
last_split <- i + 3
i <- i + 2 # Skip past ' OR'
}
}
i <- i + 1
}
# Add the last part
parts <- c(parts, trimws(paste(chars[last_split:length(chars)], collapse="")))
# Re-attach universal NOT if present
if (universal_not != "") {
parts <- paste(parts, universal_not)
}
return(parts)
}
# Split intelligently
chunks <- split_boolean_query(search_query)
print(chunks)
split_boolean_query <- function(query) {
# Extract universal NOT at the end, e.g., "NOT D"
not_match <- regexpr(" NOT [^()]+$", query)
universal_not <- ""
if (not_match[1] != -1) {
universal_not <- substr(query, not_match[1], nchar(query))
query <- substr(query, 1, not_match[1] - 1)
query <- trimws(query)
}
chars <- strsplit(query, "")[[1]]
parts <- c()
depth <- 0
last_split <- 1
i <- 1
while (i <= length(chars)) {
# Track parentheses
if (chars[i] == "(") depth <- depth + 1
if (chars[i] == ")") depth <- depth - 1
# Only split at top-level ORs
if (depth == 0 && i <= length(chars) - 3) {
# Look for ' OR '
if (paste(chars[i:(i+2)], collapse="") == " OR") {
parts <- c(parts, trimws(paste(chars[last_split:(i-1)], collapse="")))
last_split <- i + 3
i <- i + 2 # Skip past ' OR'
}
}
i <- i + 1
}
# Add the last part
parts <- c(parts, trimws(paste(chars[last_split:length(chars)], collapse="")))
# Re-attach universal NOT if present
if (universal_not != "") {
parts <- paste(parts, universal_not)
}
return(parts)
}
# Example Boolean query
split_boolean_query("(A AND B) OR (C AND D) NOT E")
split_boolean_query <- function(query) {
# Extract universal NOT at the end, e.g., "NOT D"
not_match <- regexpr(" NOT [^()]+$", query)
universal_not <- ""
if (not_match[1] != -1) {
universal_not <- substr(query, not_match[1], nchar(query))
query <- substr(query, 1, not_match[1] - 1)
query <- trimws(query)
}
chars <- strsplit(query, "")[[1]]
parts <- c()
depth <- 0
last_split <- 1
i <- 1
while (i <= length(chars)) {
# Track parentheses
if (chars[i] == "(") depth <- depth + 1
if (chars[i] == ")") depth <- depth - 1
# Only split at top-level ORs
if (depth == 0 && i <= length(chars) - 3) {
# Look for ' OR '
if (paste(chars[i:(i+2)], collapse="") == " OR") {
parts <- c(parts, trimws(paste(chars[last_split:(i-1)], collapse="")))
last_split <- i + 3
i <- i + 2 # Skip past ' OR'
}
}
i <- i + 1
}
# Add the last part
parts <- c(parts, trimws(paste(chars[last_split:length(chars)], collapse="")))
# Re-attach universal NOT if present
if (universal_not != "") {
parts <- paste(parts, universal_not)
}
return(parts)
}
# Example Boolean query
split_boolean_query("(A AND B) OR (C AND D) NOT E")
# Split intelligently
chunks <- split_boolean_query(search_query)
print(chunks)
NOT <- 'NOT ("cholin"[All Fields] OR "choline"[Supplementary Concept] OR "choline"[All Fields] OR "choline"[MeSH Terms] OR "cholines"[All Fields] OR "choline s"[All Fields] OR "carnitin"[All Fields] OR "carnitine"[Supplementary Concept] OR "carnitine"[All Fields] OR "carnitine"[MeSH Terms] OR "carnitine s"[All Fields] OR "carnitines"[All Fields] OR "folic acid"[Supplementary Concept] OR "folic acid"[All Fields] OR "folate"[All Fields] OR "folic acid"[MeSH Terms] OR "folic"[All Fields] AND "acid"[All Fields]) OR "folates"[All Fields]) OR "chlorocholine"[All Fields] OR ("phosphatidylcholines"[Supplementary Concept] OR "phosphatidylcholines"[All Fields] OR "phosphatidylcholine"[All Fields] OR "phosphatidylcholines"[MeSH Terms]) OR ("acylcarnitine"[Supplementary Concept] OR "acylcarnitine"[All Fields] OR "acylcarnitines"[All Fields]) OR "folic acid"[All Fields] OR ("cytidine diphosphate choline"[Supplementary Concept] OR "cytidine diphosphate choline"[All Fields] OR "citicoline"[All Fields] OR "cytidine diphosphate choline"[MeSH Terms] OR ("cytidine"[All Fields] AND "diphosphate"[All Fields] AND "choline"[All Fields])) OR ("cholinergic agents"[Pharmacological Action] OR "cholinergic agents"[Supplementary Concept] OR "cholinergic agents"[All Fields] OR "cholinergic"[All Fields] OR "cholinergic agents"[MeSH Terms] OR ("cholinergic"[All Fields] AND "agents"[All Fields]) OR "cholinergics"[All Fields] OR "cholinergically"[All Fields]) OR ("acetylcholinesterase"[Supplementary Concept] OR "acetylcholinesterase"[All Fields] OR "acetylcholinesterases"[All Fields] OR "acetylcholinesterase"[MeSH Terms] OR "acetylcholinesterasic"[All Fields] OR "ache protein human"[Supplementary Concept] OR "ache protein human"[All Fields]) OR ("succinylcholine"[Supplementary Concept] OR "succinylcholine"[All Fields] OR "succinylcholine"[MeSH Terms]) OR "disinfection byproduct*"[Title/Abstract] OR "disinfection by product*"[Title/Abstract] OR "nano*"[All Fields] OR "ammonium perchlorate"[All Fields] OR "ammonium dinitramide"[All Fields] OR "susceptib*"[Title] OR "plants"[MeSH Terms] OR "plant structures"[MeSH Terms] OR "design"[Title] OR "synthesis"[Title] OR "photosynthe*"[All Fields]'
NOT
search_1 <- read_file("search terms/#1 841 QACs chemical string.txt")
search_2 <- read_file("#2 QACs general chemical term string.txt")
search_2 <- read_file("search terms/#2 QACs general chemical term string.txt")
search_3 <- read_file("search terms/#3 QACs exclusion string.txt")
# concatenate search_1 and exclude
paste0(search_1, search_exclude)
search_exclude <- read_file("search terms/#3 QACs exclusion string.txt")
# concatenate search_1 and exclude
paste0(search_1, search_exclude)
# concatenate search_1 and exclude
search_1_full <- paste0(search_1, search_exclude)
search_1_full
my_query <- search_1_full
# Submit the Query
epm <- epm_query(my_query)
split_boolean_query <- function(query) {
# Extract universal NOT at the end, e.g., "NOT D"
not_match <- regexpr(" NOT [^()]+$", query)
universal_not <- ""
if (not_match[1] != -1) {
universal_not <- substr(query, not_match[1], nchar(query))
query <- substr(query, 1, not_match[1] - 1)
query <- trimws(query)
}
chars <- strsplit(query, "")[[1]]
parts <- c()
depth <- 0
last_split <- 1
i <- 1
while (i <= length(chars)) {
# Track parentheses
if (chars[i] == "(") depth <- depth + 1
if (chars[i] == ")") depth <- depth - 1
# Only split at top-level ORs
if (depth == 0 && i <= length(chars) - 3) {
# Look for ' OR '
if (paste(chars[i:(i+2)], collapse="") == " OR") {
parts <- c(parts, trimws(paste(chars[last_split:(i-1)], collapse="")))
last_split <- i + 3
i <- i + 2 # Skip past ' OR'
}
}
i <- i + 1
}
# Add the last part
parts <- c(parts, trimws(paste(chars[last_split:length(chars)], collapse="")))
# Re-attach universal NOT if present
if (universal_not != "") {
parts <- paste(parts, universal_not)
}
return(parts)
}
# Example Boolean query
split_boolean_query("(A AND B) OR (C AND D) NOT E")
chunks_1 <- split_boolean_query(search_1_full)
chunks_1
search_try <- '104-74-5[rn] OR "1-Dodecylpyridinium chloride"[tiab] OR 106966-25-0[rn] OR "2-(3-Methoxy-3-oxopropyl)-1,1,1-trimethylhydrazin-1-ium bromide"[tiab] OR 112025-60-2[rn] OR "Sanguinarine chloride mixt. with chelerythrine chloride"[tiab] OR 1184-78-7[rn] OR "N,N-Dimethyl-methanamine-N-oxide"[tiab] OR 123-03-5[rn] OR "Cetylpyridinium chloride"[tiab] OR 1254469-57-2[rn] OR "Morpholinium, 4-[2-[2-[(2-hydroxyphenyl)methylene]hydrazinyl]-2-oxoethyl]-4-methyl-, chloride (1:1)"[tiab] OR 1263133-33-0[rn] OR "Triflumezopyrim"[tiab] OR 13223-03-5[rn] OR "Ethyldimethyl(2-((2-methyl-1-oxoallyl)oxy)ethyl)ammonium ethyl sulphate"[tiab] OR 15471-17-7[rn] OR "3-(Pyridinium-1-yl)propane-1-sulfonate"[tiab] OR 1643-20-5[rn] OR "N,N-Dimethyldodecylamine-N-oxide"[tiab] OR 1910-42-5[rn] OR "Paraquat dichloride"[tiab] OR 19223-55-3[rn] OR "3-[(Lauramidoethyl)dimethylammonio]-2-hydroxypropanesulfonate"[tiab] OR 2234-56-2[rn] OR "4-(2-Chlorophenyl)-3-[3-[4-(2-chlorophenyl)benzo[f]quinolin-3(4H)-ylidene]-1-propenyl]-benzo[f]quinolinium perchlorate"[tiab] OR 23111-00-4[rn] OR "Nicotinamide riboside chloride"[tiab] OR 23328-71-4[rn] OR "Stearoxypropyltrimonium chloride"[tiab] OR 24307-26-4[rn] OR "1,1-Dimethylpiperidinium chloride"[tiab] OR 2605-79-0[rn] OR "N,N-Dimethyldecylamine oxide"[tiab] OR 2657-00-3[rn] OR "6-Diazo-5,6-dihydro-5-oxo1-naphthalenesulfonic acid sodium salt"[tiab] OR 26591-72-0[rn] OR "3-Methyl-1-vinylimidazolium methyl sulfate"[tiab] OR 29508-47-2[rn] OR "4H-1,2,4-Triazolium, 1,4-dimethyl-5-(2-(4-(methyl(phenylmethyl)amino)phenyl)diazenyl)-, chloride (1:1)"[tiab] OR 29556-33-0[rn] OR "1H-Benzimidazolium, 2-(7-(diethylamino)-2-oxo-2H-1-benzopyran-3-yl)-1,3-dimethyl-, chloride"[tiab] OR 3033-77-0[rn] OR "Glycidyl trimethylammonium chloride"[tiab] OR 30516-87-1[rn] OR "3'-Azido-3'-deoxythymidine"[tiab] OR 3332-27-2[rn] OR "N,N-Dimethyl-1-tetradecanamine N-oxide"[tiab] OR 370865-89-7[rn] OR "1H-​Imidazolium, 3-​ethyl-​1-​methyl-​, salt with N-​cyanocyanamide (1:1)"[tiab] OR 3770-97-6[rn] OR "6-Diazo-5,6-dihydro-5-oxo-1-naphthalenesulfonyl chloride"[tiab] OR 3918-73-8[rn] OR "1-(2-Hydroxy-3-sulphonatopropyl)pyridinium"[tiab] OR 41591-87-1[rn] OR "Dimethyltetradecyl(3-(trimethoxysilyl)propyl)ammonium chloride"[tiab] OR 43222-48-6[rn] OR "Difenzoquat metilsulfate"[tiab] OR 45021-77-0[rn] OR "(3-Acrylamidopropyl)trimethylammonium chloride"[tiab] OR 46830-22-2[rn] OR "N-(2-Acryloyloxyethyl)-N-benzyl-N,N-dimethylammonium chloride"[tiab] OR 4826-71-5[rn] OR "Calcium phosphorylcholine"[tiab] OR 497-30-3[rn] OR "Ergothioneine"[tiab] OR 51229-78-8[rn] OR "Chloroallyl methenamine chloride"[tiab] OR 51277-96-4[rn] OR "1-Propanaminium, N,N,N-trimethyl-3-[(1-oxohexadecyl)amino]-, chloride (1:1)"[tiab] OR 5261-99-4[rn] OR "5-(Dimethyliminio)-3-hydroxypentanimidate--hydrogen chloride (1/1)"[tiab] OR 56773-42-3[rn] OR "Tetraethylammonium perfluorooctanesulfonate"[tiab] OR 62314-22-1[rn] OR "1-Propanaminium, 2-hydroxy-N,N,N-trimethyl-, 2-ethylhexanoate (1:1)"[tiab] OR 630113-05-2[rn] OR "1,3-Propanediaminium, N1-[3-[[2-[dimethyl[3-[(2-methyl-1-oxo-2-propen-1-yl)amino]propyl]ammonio]acetyl]amino]propyl]-2-hydroxy-N1,N1,N3,N3,N3-pentamethyl-, chloride (1:3)"[tiab] OR 65039-09-0[rn] OR "1-Ethyl-3-methylimidazolium chloride"[tiab] OR 65113-55-5[rn] OR "C.I. Acid Yellow 36-C.I. Basic Violet 3 salt"[tiab] OR 67226-45-3[rn] OR "1-Butylpyridinium heptachloroaluminate"[tiab] OR 68133-60-8[rn] OR "1-Benzyl-3-carboxypyridinium chloride sodium salt"[tiab] OR 61167-10-0[rn] OR "Maleic hydrazide choline salt"[tiab] OR 72459-58-6[rn] OR "Triazoxide"[tiab] OR 73547-70-3[rn] OR "Ceftazidime dihydrochloride"[tiab] OR 7529-22-8[rn] OR "4-Methylmorpholine 4-oxide"[tiab] OR 76902-90-4[rn] OR "3,5,7-Triaza-1-azoniatricyclo(3.3.1.1(superscript3,7))decane, 1-methyl-, chloride"[tiab] OR 79723-02-7[rn] OR "Methanaminium, N,N,N-trimethyl-, 1,2-benzenedicarboxylate (1:1)"[tiab] OR 79771-28-1[rn] OR "C.I. Reactive Blue 187"[tiab] OR 80475-32-7[rn] OR "N,N-Dimethyl-3-((perfluorohexyl)ethylsulfonyl)aminopropanamine N-oxide"[tiab] OR 83950-14-5[rn] OR "4-(2-(4-(Benzylmethyl(ethyl)amino)phenyl)vinyl)-1-(2-hydroxyethyl)pyridinium acetate"[tiab] OR 84000-82-8[rn] OR "N-Benzyl-4-[(2,4-dimethyl-2,4-dihydro-3H-1,2,4-triazol-3-ylidene)hydrazinylidene]-N-methylcyclohexa-2,5-dien-1-iminium acetate"[tiab] OR 84051-87-6[rn] OR "2-((4-(Ethyl(2-hydroxyethyl)amino)phenyl)azo)-6-methoxy-3-methylbenzothiazolium acetate"[tiab] OR 85-00-7[rn] OR "Diquat dibromide"[tiab] OR 91648-19-0[rn] OR "1-Propanaminium, N-(3-aminopropyl)-2-hydroxy-N,N-dimethyl-3-sulfo-, N-C12-14 acyl derivs., inner salts"[tiab] OR 12270-13-2[rn] OR "C.I. Basic Blue 41"[tiab] OR 13197-76-7[rn] OR "Dodecyl(2-hydroxy-3-sulphonatopropyl)dimethylammonium"[tiab] OR 138-24-9[rn] OR "N,N,N-Trimethylanilinium chloride"[tiab] OR 20262-76-4[rn] OR "C.I. Food Blue 5:2"[tiab] OR 2353-45-9[rn] OR "FD&C Green No. 3"[tiab] OR 27668-52-6[rn] OR "N,N-Dimethyl-N-(3-(trimethoxysilyl)propyl) octadecan-1-aminium chloride"[tiab] OR 3087-16-9[rn] OR "Acid green 50"[tiab] OR 34455-29-3[rn] OR "6:2 Fluorotelomer sulfonamide betaine"[tiab] OR 3844-45-9[rn] OR "FD&C Blue No. 1"[tiab] OR 41272-40-6[rn] OR "(4-(alpha-(4-(Dimethylamino)phenyl)benzylidene)cyclohexa-2,5-dien-1-ylidene)dimethylammonium acetate"[tiab] OR 44992-01-0[rn] OR "2-(Dimethylamino)ethyl acrylate methochloride"[tiab] OR 5039-78-1[rn] OR "(2-(Methacryloyloxy)ethyl)trimethylammonium chloride"[tiab] OR 51410-72-1[rn] OR "N,N,N-Trimethyl-3-[(2-methylacryloyl)amino]propan-1-aminium chloride"[tiab] OR 54060-92-3[rn] OR "C.I. Basic Yellow 28"[tiab] OR 548-62-9[rn] OR "Gentian Violet"[tiab] OR 58798-47-3[rn] OR "Basic Yellow 28 acetate"[tiab] OR 6441-82-3[rn] OR "3H-Indolium, 2-[2-[4-[(2-chloroethyl)ethylamino]-2-methylphenyl]ethenyl]-1,3,3-trimethyl-, chloride (1:1)"[tiab] OR 65122-06-7[rn] OR "3H-Indolium, 2-[2-[4-[(2-cyanoethyl)methylamino]phenyl]ethenyl]-1,3,3-trimethyl-, acetate (1:1)"[tiab] OR 67-03-8[rn] OR "Thiamine hydrochloride"[tiab] OR 67939-65-5[rn] OR "(4-(Bis(4-(dimethylamino)phenyl)methylene)-2,5-cyclohexadien-1-ylidene)dimethylammonium acetate"[tiab] OR 68123-13-7[rn] OR "Basic Blue 99"[tiab] OR 71550-24-8[rn] OR "Ethanaminium, 2-[[2-cyano-3-[4-[ethyl(phenylmethyl)amino]phenyl]-1-oxo-2-propen-1-yl]oxy]-N,N,N-trimethyl-, chloride (1:1)"[tiab] OR 76994-37-1[rn] OR "(4-((4-(Diethylamino)phenyl)phenylmethylene)-2,5-cyclohexadien-1-ylidene)diethylammonium acetate"[tiab] OR 78181-99-4[rn] OR "1-Propanaminium, 3-[[2-cyano-3-[4-(diethylamino)phenyl]-1-oxo-2-propen-1-yl]oxy]-N-[2-[[2-cyano-3-[4-(diethylamino)phenyl]-1-oxo-2-propen-1-yl]oxy]ethyl]-N,N-dimethyl-, chloride (1:1)"[tiab] OR 82338-76-9[rn] OR "Bis((4-((4-(diethylamino)phenyl)(4-(ethylamino)-1-naphthyl)methylene)cyclohexa-2,5-dien-1-ylidene)diethylammonium) dicopper(1+) hexa(cyano-C)ferrate(4-)"[tiab] OR 83803-79-6[rn] OR "(4-((4-Anilino-1-naphthyl)(4-(dimethylamino)phenyl)methylene)cyclohexa-2,5-dien-1-ylidene)dimethylammonium acetate"[tiab] OR 83969-12-4[rn] OR "4-({5-[Di(propan-2-yl)amino]-3-methyl-1,3,4-thiadiazol-2(3H)-ylidene}hydrazinylidene)-N,N-dimethylcyclohexa-2,5-dien-1-iminium methyl sulfate"[tiab] OR 84434-47-9[rn] OR "(4-((4-(Dimethylamino)phenyl)(4-(methylamino)phenyl)methylene)cyclohexa-2,5-dien-1-ylidene)dimethylammonium acetate"[tiab] OR 93783-70-1[rn] OR "4-({5-[Di(propan-2-yl)amino]-3-methyl-1,3,4-thiadiazol-2(3H)-ylidene}hydrazinylidene)-N,N-dimethylcyclohexa-2,5-dien-1-iminium zinc chloride (1/1/3)"[tiab] OR 999-81-5[rn] OR "Chlormequat chloride"[tiab] OR 100859-15-2[rn] OR "N,N,N-Trimethyldodecan-1-aminium formate"[tiab] OR 10096-64-7[rn] OR "4-Ethyl-4-octadecylmorpholinium ethyl sulfate"[tiab] OR 101904-93-2[rn] OR "N,N,N-Trimethyldodecan-1-aminium methanesulfonate"[tiab] OR 101904-95-4[rn] OR "N-Ethyl-N,N-dimethylhexadecan-1-aminium benzenesulfonate"[tiab] OR 102-30-7[rn] OR "Lauryldimethyl-3,4-dichlorobenzylammonium chloride"[tiab] OR 10247-90-2[rn] OR "1-Heptanaminium, N,N,N-triheptyl-, chloride (1:1)"[tiab] OR 10249-13-5[rn] OR "Isoquinolinium, 2-(2-phenylethyl)-, bromide (1:1)"[tiab] OR 10328-34-4[rn] OR "Benzyl hexadecyl dimethyl ammonium"[tiab] OR 10328-35-5[rn] OR "N-Benzyl-N,N-dimethyldodecan-1-aminium"[tiab] OR 103694-63-9[rn] OR "1,3-Propanediaminium, N1,N3-diethyl-N1-[3-(ethyldimethylammonio)propyl]-N1-(2-hydroxyhexadecyl)-N3,N3-dimethyl-, ethyl sulfate (1:3)"[tiab] OR 103999-25-3[rn] OR "N,N,N-Trimethyldodecan-1-aminium hydrogen sulfate"[tiab] OR 10595-49-0[rn] OR "1-Propanaminium, N,N,N-trimethyl-3-[(1-oxododecyl)amino]-, methyl sulfate (1:1)"[tiab] OR 106068-87-5[rn] OR "Benzothiazolium, 5-chloro-2-[[5-[(5-chloro-1,3-diethyl-1,3-dihydro-2H-benzimidazol-2-ylidene)ethylidene]-3-ethyl-4-oxo-2-thiazolidinylidene]methyl]-3-ethyl-, iodide"[tiab] OR 108797-84-8[rn] OR "3-[(3-Butoxy-2-hydroxypropyl)(dimethyl)azaniumyl]-2-hydroxy-1-propanesulfonate"[tiab] OR 108797-85-9[rn] OR "1-Propanaminium, 3-[(2-ethylhexyl)oxy]-2-hydroxy-N-(2-hydroxy-3-sulfopropyl)-N,N-dimethyl-, inner salt"[tiab] OR 109775-39-5[rn] OR "1H-Benz(de)isoquinoline-2(3H)-propanaminium, N,N'-(methylenebis(4,1-phenyleneimino(2-oxo-2,1-ethanediyl)))bis(N,N-dimethyl-1,3-dioxo-, dichloride"[tiab] OR 1112-67-0[rn] OR "1-Butanaminium, N,N,N-tributyl-, chloride (1:1)"[tiab] OR 112324-16-0[rn] OR "N-{3-[Ethyl(dimethyl)azaniumyl]propyl}-12-hydroxyoctadec-9-enimidate--ethyl hydrogen sulfate (1/1)"[tiab] OR 112538-01-9[rn] OR "Bis(N-dodecyl-N,N-dimethyldodecan-1-aminium) sulfate"[tiab] OR 113042-88-9[rn] OR "N-Dodecyl-N,N-dimethyldodecan-1-aminium perchlorate"[tiab] OR 113612-26-3[rn] OR "N-Benzyl-N,N-dimethyloctan-1-aminium iodide"[tiab] OR 113833-55-9[rn] OR "Methanaminium, N-[4-[[4-(dimethylamino)phenyl][4-[(2-hydroxyethyl)amino]phenyl]methylene]-2,5-cyclohexadien-1-ylidene]-N-methyl-, chloride (1:1)"[tiab] OR 117-92-0[rn] OR "Quinaldine Red"[tiab] OR 118516-73-7[rn] OR "1,3-Propanediaminium, 2-hydroxy-N,N,N′,N′-tetramethyl-N,N′-dioctadecyl-, dichloride"[tiab] OR 118936-21-3[rn] OR "1-Dodecanaminium, N,N,N-trimethyl-, fluoride"[tiab] OR 12001-31-9[rn] OR "Quaternium 18-hectorite"[tiab] OR 120141-26-6[rn] OR "N,N-Dimethyl-N-octadecyloctadecan-1-aminium gold(3+) 2-sulfanylidene-2H-1,3-dithiole-4,5-bis(thiolate) (1/1/2)"[tiab] OR 121028-75-9[rn] OR "Thiazolium, 3-ethyl-4,5-dimethyl-, bromide"[tiab] OR 12217-48-0[rn] OR "C.I. Basic Red 14 chloride"[tiab] OR 123-46-6[rn] OR "Betaine Hydrazide Hydrochloride"[tiab] OR 123776-56-7[rn] OR "Acetamidopropyl trimonium chloride"[tiab] OR 124-03-8[rn] OR "Quaternium 17"[tiab] OR 124900-36-3[rn] OR "N,N,N-Trimethyldodecan-1-aminium dihydrogen phosphate"[tiab] OR 125301-98-6[rn] OR "4-[2-(2-{[5,6-Dimethoxy-3-(3-sulfopropyl)-1,3-benzothiazol-2(3H)-ylidene]methyl}but-1-en-1-yl)-5-phenyl-3H-1,3-benzoxazol-1-ium-3-yl]butane-2-sulfonate"[tiab] OR 125603-46-5[rn] OR "N,N,N-Trimethyldodecan-1-aminium benzoate"[tiab] OR 12691-60-0[rn] OR "Stearalkonium hectorite"[tiab] OR 127179-40-2[rn] OR "1-Octadecanaminium, N,N-dimethyl-N-octadecyl-, salt with 4,4'-((3,3'-dichloro(1,1'-biphenyl)-4,4'-diyl)bis(azo(2-acetyl-1-oxo-2,1-ethanediyl)imino))bis(benzenesulfonic acid) (2:1)"[tiab] OR 127311-98-2[rn] OR "Ricinoleamidopropyltrimonium chloride"[tiab] OR 128439-91-8[rn] OR "2,4-Dimethyl-3-(prop-2-en-1-yl)-1,3-thiazol-3-ium hexafluoridophosphate(1-)"[tiab] OR 129-17-9[rn] OR "C.I. Acid Blue 1, sodium salt"[tiab] OR 13018-95-6[rn] OR "1-Octadecanaminium, N-(2-hydroxyethyl)-N,N-dimethyl-, chloride (1:1)"[tiab] OR 13177-41-8[rn] OR "Dimethyloctadecyl(3-sulphopropyl)ammonium hydroxide"[tiab] OR 132435-04-2[rn] OR "Naphtho(1,2-d)thiazolium, 2-((3-methyl-4-phenyl-2-thiazolidinylidene)methyl)-1-(3-sulfopropyl)-, hydroxide, inner salt"[tiab] OR 132561-32-1[rn] OR "1-Propanaminium, 3-butoxy-2-hydroxy-N,N-dimethyl-N-(3-((1-oxo-9,12-octadecadienyl)amino)propyl)-, (Z,Z)-, dimer, salt with 2-hydroxypropanoic acid (1:2)"[tiab] OR 1325-75-3[rn] OR "Pigment Green 1"[tiab] OR 13264-41-0[rn] OR "UNII-S287HG54IX"[tiab] OR 132828-61-6[rn] OR "N,N-Dimethyl-N-tetradecyltetradecan-1-aminium iodide"[tiab] OR 13308-45-7[rn] OR "N,N-Dimethyl-N-octadecyloctadecan-1-aminium acetate"[tiab] OR 134112-42-8[rn] OR "Isostearamidopropyl laurylacetodimonium chloride"[tiab] OR 13441-22-0[rn] OR "Ethanaminium, N-(2-hydroxyethyl)-N-[2-[(2-hydroxyethyl)(1-oxooctadecyl)amino]ethyl]-N-methyl-2-[(1-oxooctadecyl)oxy]-, methyl sulfate (1:1)"[tiab] OR 13623-06-8[rn] OR "Dodecyltrimethylammonium methyl sulphate"[tiab] OR 137044-11-2[rn] OR "N-{2-[3-(Trimethylazaniumyl)propoxy]ethyl}ethanimidate--hydrogen chloride (1/1)"[tiab] OR 138194-91-9[rn] OR "N-Decyl-N,N-dimethyldecan-1-aminium propanoate"[tiab] OR 138879-94-4[rn] OR "N,N'-Bis[2-[bis(2-hydroxyethyl)methylammonio]ethyl]-N,N'-bis(2-hydroxyethyl)-N,N'-dimethyl-1,2-ethanediaminium tetrachloride"[tiab] OR 14097-03-1[rn] OR "2-[[4-[2-(2-Chloro-4-nitrophenyl)diazenyl]phenyl]ethylamino]-N,N,N-trimethylethanaminium"[tiab] OR 14187-31-6[rn] OR "Quinolinium, 1-ethyl-2-[5-(1-ethyl-2(1H)-quinolinylidene)-1,3-pentadien-1-yl]-, iodide (1:1)"[tiab] OR 14254-17-2[rn] OR "Ethanaminium, 2-[[4-[2-(2-chloro-4-nitrophenyl)diazenyl]phenyl]ethylamino]-N,N,N-trimethyl-, methyl sulfate (1:1)"[tiab] OR 14254-18-3[rn] OR "1-Propanaminium, 3-[[9,10-dihydro-4-(methylamino)-9,10-dioxo-1-anthracenyl]amino]-N,N,N-trimethyl-, methyl sulfate (1:1)"[tiab] OR 147228-81-7[rn] OR "Benzyldimethyltetradecylammonium chloride dihydrate"[tiab] OR 14806-50-9[rn] OR "Benzoxazolium, 3-ethyl-2-[5-(3-ethyl-2(3H)-benzoxazolylidene)-1,3-pentadien-1-yl]-, iodide (1:1)"[tiab] OR 14855-76-6[rn] OR "Benzenaminium, 4-[[4-(dimethylamino)phenyl][4-(dimethyliminio)-2,5-cyclohexadien-1-ylidene]methyl]-N-ethyl-N,N-dimethyl-, bromide chloride (1:1:1)"[tiab] OR 148788-55-0[rn] OR "Didecyl dimethyl ammonium carbonate"[tiab] OR 148812-65-1[rn] OR "Didecyldimethylammonium bicarbonate (1to1)"[tiab] OR 14970-39-9[rn] OR "4-[(2,4-Dimethyl-2,4-dihydro-3H-1,2,4-triazol-3-ylidene)hydrazinylidene]-N,N-diethylcyclohexa-2,5-dien-1-iminium zinc chloride (1/1/3)"[tiab] OR 14985-42-3[rn] OR "N,N,N-Trimethyldodecan-1-aminium 4-methylbenzene-1-sulfonate"[tiab] OR 149879-98-1[rn] OR "Mirataine BET-E 40"[tiab] OR 15000-59-6[rn] OR "C.I. Basic Blus 54"[tiab] OR 15589-64-7[rn] OR "Isoquinolinium, 2-(3-sulfopropyl)-, inner salt"[tiab] OR 15619-48-4[rn] OR "1-Benzylquinolinium chloride"[tiab] OR 15780-02-6[rn] OR "1-Propanaminium, N,N,N-tripropyl-, perchlorate (1:1)"[tiab] OR 15792-67-3[rn] OR "C.I. Acid Blue 9, aluminum salt (3:2)"[tiab] OR 16044-24-9[rn] '
search_try <- '104-74-5[rn] OR "1-Dodecylpyridinium chloride"[tiab] OR 106966-25-0[rn] OR "2-(3-Methoxy-3-oxopropyl)-1,1,1-trimethylhydrazin-1-ium bromide"[tiab] OR 112025-60-2[rn] OR "Sanguinarine chloride mixt. with chelerythrine chloride"[tiab] OR 1184-78-7[rn] OR "N,N-Dimethyl-methanamine-N-oxide"[tiab] OR 123-03-5[rn] OR "Cetylpyridinium chloride"[tiab] OR 1254469-57-2[rn] OR "Morpholinium, 4-[2-[2-[(2-hydroxyphenyl)methylene]hydrazinyl]-2-oxoethyl]-4-methyl-, chloride (1:1)"[tiab] OR 1263133-33-0[rn] OR "Triflumezopyrim"[tiab] OR 13223-03-5[rn] OR "Ethyldimethyl(2-((2-methyl-1-oxoallyl)oxy)ethyl)ammonium ethyl sulphate"[tiab] OR 15471-17-7[rn] OR "3-(Pyridinium-1-yl)propane-1-sulfonate"[tiab] OR 1643-20-5[rn] OR "N,N-Dimethyldodecylamine-N-oxide"[tiab] OR 1910-42-5[rn] OR "Paraquat dichloride"[tiab] OR 19223-55-3[rn] OR "3-[(Lauramidoethyl)dimethylammonio]-2-hydroxypropanesulfonate"[tiab] OR 2234-56-2[rn] OR "4-(2-Chlorophenyl)-3-[3-[4-(2-chlorophenyl)benzo[f]quinolin-3(4H)-ylidene]-1-propenyl]-benzo[f]quinolinium perchlorate"[tiab] OR 23111-00-4[rn] OR "Nicotinamide riboside chloride"[tiab] OR 23328-71-4[rn] OR "Stearoxypropyltrimonium chloride"[tiab] OR 24307-26-4[rn] OR "1,1-Dimethylpiperidinium chloride"[tiab] OR 2605-79-0[rn] OR "N,N-Dimethyldecylamine oxide"[tiab] OR 2657-00-3[rn] OR "6-Diazo-5,6-dihydro-5-oxo1-naphthalenesulfonic acid sodium salt"[tiab] OR 26591-72-0[rn] OR "3-Methyl-1-vinylimidazolium methyl sulfate"[tiab] OR 29508-47-2[rn] OR "4H-1,2,4-Triazolium, 1,4-dimethyl-5-(2-(4-(methyl(phenylmethyl)amino)phenyl)diazenyl)-, chloride (1:1)"[tiab] OR 29556-33-0[rn] OR "1H-Benzimidazolium, 2-(7-(diethylamino)-2-oxo-2H-1-benzopyran-3-yl)-1,3-dimethyl-, chloride"[tiab] OR 3033-77-0[rn] OR "Glycidyl trimethylammonium chloride"[tiab] OR 30516-87-1[rn] OR "3'-Azido-3'-deoxythymidine"[tiab] OR 3332-27-2[rn] OR "N,N-Dimethyl-1-tetradecanamine N-oxide"[tiab] OR 370865-89-7[rn] OR "1H-​Imidazolium, 3-​ethyl-​1-​methyl-​, salt with N-​cyanocyanamide (1:1)"[tiab] OR 3770-97-6[rn] OR "6-Diazo-5,6-dihydro-5-oxo-1-naphthalenesulfonyl chloride"[tiab] OR 3918-73-8[rn] OR "1-(2-Hydroxy-3-sulphonatopropyl)pyridinium"[tiab] OR 41591-87-1[rn] OR "Dimethyltetradecyl(3-(trimethoxysilyl)propyl)ammonium chloride"[tiab] OR 43222-48-6[rn] OR "Difenzoquat metilsulfate"[tiab] OR 45021-77-0[rn] OR "(3-Acrylamidopropyl)trimethylammonium chloride"[tiab] OR 46830-22-2[rn] OR "N-(2-Acryloyloxyethyl)-N-benzyl-N,N-dimethylammonium chloride"[tiab] OR 4826-71-5[rn] OR "Calcium phosphorylcholine"[tiab] OR 497-30-3[rn] OR "Ergothioneine"[tiab] OR 51229-78-8[rn] OR "Chloroallyl methenamine chloride"[tiab] OR 51277-96-4[rn] OR "1-Propanaminium, N,N,N-trimethyl-3-[(1-oxohexadecyl)amino]-, chloride (1:1)"[tiab] OR 5261-99-4[rn] OR "5-(Dimethyliminio)-3-hydroxypentanimidate--hydrogen chloride (1/1)"[tiab] OR 56773-42-3[rn] OR "Tetraethylammonium perfluorooctanesulfonate"[tiab] OR 62314-22-1[rn] OR "1-Propanaminium, 2-hydroxy-N,N,N-trimethyl-, 2-ethylhexanoate (1:1)"[tiab] OR 630113-05-2[rn] OR "1,3-Propanediaminium, N1-[3-[[2-[dimethyl[3-[(2-methyl-1-oxo-2-propen-1-yl)amino]propyl]ammonio]acetyl]amino]propyl]-2-hydroxy-N1,N1,N3,N3,N3-pentamethyl-, chloride (1:3)"[tiab] OR 65039-09-0[rn] OR "1-Ethyl-3-methylimidazolium chloride"[tiab] OR 65113-55-5[rn] OR "C.I. Acid Yellow 36-C.I. Basic Violet 3 salt"[tiab] OR 67226-45-3[rn] OR "1-Butylpyridinium heptachloroaluminate"[tiab] OR 68133-60-8[rn] OR "1-Benzyl-3-carboxypyridinium chloride sodium salt"[tiab] OR 61167-10-0[rn] OR "Maleic hydrazide choline salt"[tiab] OR 72459-58-6[rn] OR "Triazoxide"[tiab] OR 73547-70-3[rn] OR "Ceftazidime dihydrochloride"[tiab] OR 7529-22-8[rn] OR "4-Methylmorpholine 4-oxide"[tiab] OR 76902-90-4[rn] OR "3,5,7-Triaza-1-azoniatricyclo(3.3.1.1(superscript3,7))decane, 1-methyl-, chloride"[tiab] OR 79723-02-7[rn] OR "Methanaminium, N,N,N-trimethyl-, 1,2-benzenedicarboxylate (1:1)"[tiab] OR 79771-28-1[rn] OR "C.I. Reactive Blue 187"[tiab] OR 80475-32-7[rn] OR "N,N-Dimethyl-3-((perfluorohexyl)ethylsulfonyl)aminopropanamine N-oxide"[tiab] OR 83950-14-5[rn] OR "4-(2-(4-(Benzylmethyl(ethyl)amino)phenyl)vinyl)-1-(2-hydroxyethyl)pyridinium acetate"[tiab] OR 84000-82-8[rn]'
search_try <- '104-74-5[rn] OR "1-Dodecylpyridinium chloride"[tiab] OR 106966-25-0[rn] OR "2-(3-Methoxy-3-oxopropyl)-1,1,1-trimethylhydrazin-1-ium bromide"[tiab] OR 112025-60-2[rn] OR "Sanguinarine chloride mixt. with chelerythrine chloride"[tiab] OR 1184-78-7[rn] OR "N,N-Dimethyl-methanamine-N-oxide"[tiab] OR 123-03-5[rn] OR "Cetylpyridinium chloride"[tiab] OR 1254469-57-2[rn] OR "Morpholinium, 4-[2-[2-[(2-hydroxyphenyl)methylene]hydrazinyl]-2-oxoethyl]-4-methyl-, chloride (1:1)"[tiab] OR 1263133-33-0[rn] OR "Triflumezopyrim"[tiab] OR 13223-03-5[rn] OR "Ethyldimethyl(2-((2-methyl-1-oxoallyl)oxy)ethyl)ammonium ethyl sulphate"[tiab] OR 15471-17-7[rn] OR "3-(Pyridinium-1-yl)propane-1-sulfonate"[tiab] OR 1643-20-5[rn] OR "N,N-Dimethyldodecylamine-N-oxide"[tiab] OR 1910-42-5[rn] OR "Paraquat dichloride"[tiab] OR 19223-55-3[rn] OR "3-[(Lauramidoethyl)dimethylammonio]-2-hydroxypropanesulfonate"[tiab] OR 2234-56-2[rn] OR "4-(2-Chlorophenyl)-3-[3-[4-(2-chlorophenyl)benzo[f]quinolin-3(4H)-ylidene]-1-propenyl]-benzo[f]quinolinium perchlorate"[tiab] OR 23111-00-4[rn] OR "Nicotinamide riboside chloride"[tiab] OR 23328-71-4[rn] OR "Stearoxypropyltrimonium chloride"[tiab] OR 24307-26-4[rn] OR "1,1-Dimethylpiperidinium chloride"[tiab] OR 2605-79-0[rn] OR "N,N-Dimethyldecylamine oxide"[tiab] OR 2657-00-3[rn] OR "6-Diazo-5,6-dihydro-5-oxo1-naphthalenesulfonic acid sodium salt"[tiab] OR 26591-72-0[rn] OR "3-Methyl-1-vinylimidazolium methyl sulfate"[tiab] OR 29508-47-2[rn] OR "4H-1,2,4-Triazolium, 1,4-dimethyl-5-(2-(4-(methyl(phenylmethyl)amino)phenyl)diazenyl)-, chloride (1:1)"[tiab] OR 29556-33-0[rn] OR "1H-Benzimidazolium, 2-(7-(diethylamino)-2-oxo-2H-1-benzopyran-3-yl)-1,3-dimethyl-, chloride"[tiab] OR 3033-77-0[rn] OR "Glycidyl trimethylammonium chloride"[tiab] OR 30516-87-1[rn] OR "3'-Azido-3'-deoxythymidine"[tiab] OR 3332-27-2[rn] OR "N,N-Dimethyl-1-tetradecanamine N-oxide"[tiab] OR 370865-89-7[rn] OR "1H-​Imidazolium, 3-​ethyl-​1-​methyl-​, salt with N-​cyanocyanamide (1:1)"[tiab] OR 3770-97-6[rn] OR "6-Diazo-5,6-dihydro-5-oxo-1-naphthalenesulfonyl chloride"[tiab] OR 3918-73-8[rn] OR "1-(2-Hydroxy-3-sulphonatopropyl)pyridinium"[tiab] OR 41591-87-1[rn] OR "Dimethyltetradecyl(3-(trimethoxysilyl)propyl)ammonium chloride"[tiab] OR 43222-48-6[rn] OR "Difenzoquat metilsulfate"[tiab] OR 45021-77-0[rn] OR "(3-Acrylamidopropyl)trimethylammonium chloride"[tiab] OR 46830-22-2[rn] OR "N-(2-Acryloyloxyethyl)-N-benzyl-N,N-dimethylammonium chloride"[tiab] OR 4826-71-5[rn] OR "Calcium phosphorylcholine"[tiab] OR 497-30-3[rn] OR "Ergothioneine"[tiab] OR 51229-78-8[rn] OR "Chloroallyl methenamine chloride"[tiab] OR 51277-96-4[rn] OR "1-Propanaminium, N,N,N-trimethyl-3-[(1-oxohexadecyl)amino]-, chloride (1:1)"[tiab] OR 5261-99-4[rn] OR "5-(Dimethyliminio)-3-hydroxypentanimidate--hydrogen chloride (1/1)"[tiab] OR 56773-42-3[rn] OR "Tetraethylammonium perfluorooctanesulfonate"[tiab] OR 62314-22-1[rn] OR "1-Propanaminium, 2-hydroxy-N,N,N-trimethyl-, 2-ethylhexanoate (1:1)"[tiab] OR 630113-05-2[rn] OR "1,3-Propanediaminium, N1-[3-[[2-[dimethyl[3-[(2-methyl-1-oxo-2-propen-1-yl)amino]propyl]ammonio]acetyl]amino]propyl]-2-hydroxy-N1,N1,N3,N3,N3-pentamethyl-, chloride (1:3)"[tiab] OR 65039-09-0[rn]'
search_exclude
chunks_1[1]
try <- paste0(chunks_1[1], search_exclude)
try
try <- paste0(chunks_1[1], "NOT", search_exclude)
try
try <- paste0(chunks_1[1], " NOT ", search_exclude)
try
epm_query(chunk)
epm_query(try)
# Split intelligently
chunks <- split_boolean_query(search_1)
chunks
# Your input string
input <- '72269-47-7[rn] OR "1-Propanaminium, N-[2-(ethylphenylamino)ethyl]-2-hydroxy-N,N-dimethyl-, sulfate (2:1)"[tiab] OR 88992-45-4[rn] OR "6:2 Fluorotelomer thiohydroxy ammonium chloride"[tiab]'
# Split at ' OR ' (with spaces to avoid splitting inside quoted text)
chunks <- strsplit(input, " OR ", fixed = TRUE)[[1]]
# Print each chunk on a new line
cat(chunks, sep = "\n")
chunks_full <- paste(chunks, "NOT", search_exclude)
chunks_full
results_list <- lapply(chunks_full, function(chunk) {
epm <- epm_query(chunk)
epm <- epm_fetch(epm, format = 'xml')
epm <- epm_parse(epm)
return(epm)
})
